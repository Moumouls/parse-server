"use strict";

var _AdapterLoader = _interopRequireDefault(require("../AdapterLoader"));

var _node = _interopRequireDefault(require("parse/node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const apple = require('./apple');

const gcenter = require('./gcenter');

const gpgames = require('./gpgames');

const facebook = require('./facebook');

const instagram = require('./instagram');

const linkedin = require('./linkedin');

const meetup = require('./meetup');

const google = require('./google');

const github = require('./github');

const twitter = require('./twitter');

const spotify = require('./spotify');

const digits = require('./twitter'); // digits tokens are validated by twitter


const janrainengage = require('./janrainengage');

const janraincapture = require('./janraincapture');

const line = require('./line');

const vkontakte = require('./vkontakte');

const qq = require('./qq');

const wechat = require('./wechat');

const weibo = require('./weibo');

const oauth2 = require('./oauth2');

const phantauth = require('./phantauth');

const microsoft = require('./microsoft');

const keycloak = require('./keycloak');

const ldap = require('./ldap');

const webauthn = require('./webauthn');

const anonymous = {
  validateAuthData: () => {
    return Promise.resolve();
  },
  validateAppId: () => {
    return Promise.resolve();
  }
};
const providers = {
  apple,
  gcenter,
  gpgames,
  facebook,
  instagram,
  linkedin,
  meetup,
  google,
  github,
  twitter,
  spotify,
  anonymous,
  digits,
  janrainengage,
  janraincapture,
  line,
  vkontakte,
  qq,
  wechat,
  weibo,
  phantauth,
  microsoft,
  keycloak,
  ldap,
  webauthn
};

function authDataValidator(provider, adapter, appIds, options) {
  return async function (authData, req, user) {
    if (appIds && typeof adapter.validateAppId === 'function') {
      await adapter.validateAppId(appIds, authData, options, req, user);
    }

    if (typeof adapter.validateAuthData === 'function') {
      return adapter.validateAuthData(authData, options, req, user);
    } else if (typeof adapter.validateSetUp === 'function' && typeof adapter.validateLogin === 'function' && typeof adapter.validateUpdate === 'function') {
      // We can consider for DX purpose when masterKey is detected, we should
      // trigger a logged in user
      const isLoggedIn = req.auth.user && user && req.auth.user.id === user.id || user && req.auth.isMaster;
      let isUpdate = false;
      let hasAuthDataConfigured = false;

      if (user && user.get('authData') && user.get('authData')[provider]) {
        hasAuthDataConfigured = true;
      }

      if (isLoggedIn && hasAuthDataConfigured) {
        isUpdate = true;
      }

      if (isUpdate) {
        return adapter.validateUpdate(authData, options, req, user);
      }

      if (!isLoggedIn && hasAuthDataConfigured) {
        return adapter.validateLogin(authData, options, req, user);
      }

      if (!hasAuthDataConfigured) {
        return adapter.validateSetUp(authData, options, req, user);
      }
    }

    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Adapter not ready, need to implement validateAuthData or (validateSetUp, validateLogin, validateUpdate)');
  };
}

function loadAuthAdapter(provider, authOptions) {
  let defaultAdapter = providers[provider];
  const providerOptions = authOptions[provider];

  if (providerOptions && Object.prototype.hasOwnProperty.call(providerOptions, 'oauth2') && providerOptions['oauth2'] === true) {
    defaultAdapter = oauth2;
  }

  if (!defaultAdapter && !providerOptions) {
    return;
  }

  const adapter = Object.assign({}, defaultAdapter);
  const appIds = providerOptions ? providerOptions.appIds : undefined; // Try the configuration methods

  if (providerOptions) {
    const optionalAdapter = (0, _AdapterLoader.default)(providerOptions, undefined, providerOptions);

    if (optionalAdapter) {
      ['validateAuthData', 'validateAppId', 'validateSetUp', 'validateLogin', 'validateUpdate', 'challenge', 'policy'].forEach(key => {
        if (optionalAdapter[key]) {
          adapter[key] = optionalAdapter[key];
        }
      });
    }
  }

  return {
    adapter,
    appIds,
    providerOptions
  };
}

module.exports = function (authOptions = {}, enableAnonymousUsers = true) {
  let _enableAnonymousUsers = enableAnonymousUsers;

  const setEnableAnonymousUsers = function (enable) {
    _enableAnonymousUsers = enable;
  }; // To handle the test cases on configuration


  const getValidatorForProvider = function (provider) {
    if (provider === 'anonymous' && !_enableAnonymousUsers) {
      return {
        validator: undefined
      };
    }

    const {
      adapter,
      appIds,
      providerOptions
    } = loadAuthAdapter(provider, authOptions);
    return {
      validator: authDataValidator(provider, adapter, appIds, providerOptions),
      adapter
    };
  };

  return Object.freeze({
    getValidatorForProvider,
    setEnableAnonymousUsers
  });
};

module.exports.loadAuthAdapter = loadAuthAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2luZGV4LmpzIl0sIm5hbWVzIjpbImFwcGxlIiwicmVxdWlyZSIsImdjZW50ZXIiLCJncGdhbWVzIiwiZmFjZWJvb2siLCJpbnN0YWdyYW0iLCJsaW5rZWRpbiIsIm1lZXR1cCIsImdvb2dsZSIsImdpdGh1YiIsInR3aXR0ZXIiLCJzcG90aWZ5IiwiZGlnaXRzIiwiamFucmFpbmVuZ2FnZSIsImphbnJhaW5jYXB0dXJlIiwibGluZSIsInZrb250YWt0ZSIsInFxIiwid2VjaGF0Iiwid2VpYm8iLCJvYXV0aDIiLCJwaGFudGF1dGgiLCJtaWNyb3NvZnQiLCJrZXljbG9hayIsImxkYXAiLCJ3ZWJhdXRobiIsImFub255bW91cyIsInZhbGlkYXRlQXV0aERhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbGlkYXRlQXBwSWQiLCJwcm92aWRlcnMiLCJhdXRoRGF0YVZhbGlkYXRvciIsInByb3ZpZGVyIiwiYWRhcHRlciIsImFwcElkcyIsIm9wdGlvbnMiLCJhdXRoRGF0YSIsInJlcSIsInVzZXIiLCJ2YWxpZGF0ZVNldFVwIiwidmFsaWRhdGVMb2dpbiIsInZhbGlkYXRlVXBkYXRlIiwiaXNMb2dnZWRJbiIsImF1dGgiLCJpZCIsImlzTWFzdGVyIiwiaXNVcGRhdGUiLCJoYXNBdXRoRGF0YUNvbmZpZ3VyZWQiLCJnZXQiLCJQYXJzZSIsIkVycm9yIiwiT1RIRVJfQ0FVU0UiLCJsb2FkQXV0aEFkYXB0ZXIiLCJhdXRoT3B0aW9ucyIsImRlZmF1bHRBZGFwdGVyIiwicHJvdmlkZXJPcHRpb25zIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXNzaWduIiwidW5kZWZpbmVkIiwib3B0aW9uYWxBZGFwdGVyIiwiZm9yRWFjaCIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmFibGVBbm9ueW1vdXNVc2VycyIsIl9lbmFibGVBbm9ueW1vdXNVc2VycyIsInNldEVuYWJsZUFub255bW91c1VzZXJzIiwiZW5hYmxlIiwiZ2V0VmFsaWRhdG9yRm9yUHJvdmlkZXIiLCJ2YWxpZGF0b3IiLCJmcmVlemUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBQ0EsTUFBTUssUUFBUSxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxNQUFNTSxNQUFNLEdBQUdOLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1PLE1BQU0sR0FBR1AsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsTUFBTVEsTUFBTSxHQUFHUixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNUyxPQUFPLEdBQUdULE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1VLE9BQU8sR0FBR1YsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVcsTUFBTSxHQUFHWCxPQUFPLENBQUMsV0FBRCxDQUF0QixDLENBQXFDOzs7QUFDckMsTUFBTVksYUFBYSxHQUFHWixPQUFPLENBQUMsaUJBQUQsQ0FBN0I7O0FBQ0EsTUFBTWEsY0FBYyxHQUFHYixPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTWMsSUFBSSxHQUFHZCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNZSxTQUFTLEdBQUdmLE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUNBLE1BQU1nQixFQUFFLEdBQUdoQixPQUFPLENBQUMsTUFBRCxDQUFsQjs7QUFDQSxNQUFNaUIsTUFBTSxHQUFHakIsT0FBTyxDQUFDLFVBQUQs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QVVDLE1BQVYsRUFBa0I7QUFDaERGLElBQUFBLHFCQUFxQixHQUFHRSxNQUF4QjtBQUNELEdBRkQsQ0FGd0UsQ0FLeEU7OztBQUNBLFFBQU1DLHVCQUF1QixHQUFHLFVBQVV2QyxRQUFWLEVBQW9CO0FBQ2xELFFBQUlBLFFBQVEsS0FBSyxXQUFiLElBQTRCLENBQUNvQyxxQkFBakMsRUFBd0Q7QUFDdEQsYUFBTztBQUFFSSxRQUFBQSxTQUFTLEVBQUVYO0FBQWIsT0FBUDtBQUNEOztBQUVELFVBQU07QUFBRTVCLE1BQUFBLE9BQUY7QUFBV0MsTUFBQUEsTUFBWDtBQUFtQnFCLE1BQUFBO0FBQW5CLFFBQXVDSCxlQUFlLENBQUNwQixRQUFELEVBQVdxQixXQUFYLENBQTVEO0FBRUEsV0FBTztBQUFFbUIsTUFBQUEsU0FBUyxFQUFFekMsaUJBQWlCLENBQUNDLFFBQUQsRUFBV0MsT0FBWCxFQUFvQkMsTUFBcEIsRUFBNEJxQixlQUE1QixDQUE5QjtBQUE0RXRCLE1BQUFBO0FBQTVFLEtBQVA7QUFDRCxHQVJEOztBQVVBLFNBQU91QixNQUFNLENBQUNpQixNQUFQLENBQWM7QUFDbkJGLElBQUFBLHVCQURtQjtBQUVuQkYsSUFBQUE7QUFGbUIsR0FBZCxDQUFQO0FBSUQsQ0FwQkQ7O0FBc0JBSixNQUFNLENBQUNDLE9BQVAsQ0FBZWQsZUFBZixHQUFpQ0EsZUFBakMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9hZEFkYXB0ZXIgZnJvbSAnLi4vQWRhcHRlckxvYWRlcic7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5cbmNvbnN0IGFwcGxlID0gcmVxdWlyZSgnLi9hcHBsZScpO1xuY29uc3QgZ2NlbnRlciA9IHJlcXVpcmUoJy4vZ2NlbnRlcicpO1xuY29uc3QgZ3BnYW1lcyA9IHJlcXVpcmUoJy4vZ3BnYW1lcycpO1xuY29uc3QgZmFjZWJvb2sgPSByZXF1aXJlKCcuL2ZhY2Vib29rJyk7XG5jb25zdCBpbnN0YWdyYW0gPSByZXF1aXJlKCcuL2luc3RhZ3JhbScpO1xuY29uc3QgbGlua2VkaW4gPSByZXF1aXJlKCcuL2xpbmtlZGluJyk7XG5jb25zdCBtZWV0dXAgPSByZXF1aXJlKCcuL21lZXR1cCcpO1xuY29uc3QgZ29vZ2xlID0gcmVxdWlyZSgnLi9nb29nbGUnKTtcbmNvbnN0IGdpdGh1YiA9IHJlcXVpcmUoJy4vZ2l0aHViJyk7XG5jb25zdCB0d2l0dGVyID0gcmVxdWlyZSgnLi90d2l0dGVyJyk7XG5jb25zdCBzcG90aWZ5ID0gcmVxdWlyZSgnLi9zcG90aWZ5Jyk7XG5jb25zdCBkaWdpdHMgPSByZXF1aXJlKCcuL3R3aXR0ZXInKTsgLy8gZGlnaXRzIHRva2VucyBhcmUgdmFsaWRhdGVkIGJ5IHR3aXR0ZXJcbmNvbnN0IGphbnJhaW5lbmdhZ2UgPSByZXF1aXJlKCcuL2phbnJhaW5lbmdhZ2UnKTtcbmNvbnN0IGphbnJhaW5jYXB0dXJlID0gcmVxdWlyZSgnLi9qYW5yYWluY2FwdHVyZScpO1xuY29uc3QgbGluZSA9IHJlcXVpcmUoJy4vbGluZScpO1xuY29uc3QgdmtvbnRha3RlID0gcmVxdWlyZSgnLi92a29udGFrdGUnKTtcbmNvbnN0IHFxID0gcmVxdWlyZSgnLi9xcScpO1xuY29uc3Qgd2VjaGF0ID0gcmVxdWlyZSgnLi93ZWNoYXQnKTtcbmNvbnN0IHdlaWJvID0gcmVxdWlyZSgnLi93ZWlibycpO1xuY29uc3Qgb2F1dGgyID0gcmVxdWlyZSgnLi9vYXV0aDInKTtcbmNvbnN0IHBoYW50YXV0aCA9IHJlcXVpcmUoJy4vcGhhbnRhdXRoJyk7XG5jb25zdCBtaWNyb3NvZnQgPSByZXF1aXJlKCcuL21pY3Jvc29mdCcpO1xuY29uc3Qga2V5Y2xvYWsgPSByZXF1aXJlKCcuL2tleWNsb2FrJyk7XG5jb25zdCBsZGFwID0gcmVxdWlyZSgnLi9sZGFwJyk7XG5jb25zdCB3ZWJhdXRobiA9IHJlcXVpcmUoJy4vd2ViYXV0aG4nKTtcblxuY29uc3QgYW5vbnltb3VzID0ge1xuICB2YWxpZGF0ZUF1dGhEYXRhOiAoKSA9PiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9LFxuICB2YWxpZGF0ZUFwcElkOiAoKSA9PiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9LFxufTtcblxuY29uc3QgcHJvdmlkZXJzID0ge1xuICBhcHBsZSxcbiAgZ2NlbnRlcixcbiAgZ3BnYW1lcyxcbiAgZmFjZWJvb2ssXG4gIGluc3RhZ3JhbSxcbiAgbGlua2VkaW4sXG4gIG1lZXR1cCxcbiAgZ29vZ2xlLFxuICBnaXRodWIsXG4gIHR3aXR0ZXIsXG4gIHNwb3RpZnksXG4gIGFub255bW91cyxcbiAgZGlnaXRzLFxuICBqYW5yYWluZW5nYWdlLFxuICBqYW5yYWluY2FwdHVyZSxcbiAgbGluZSxcbiAgdmtvbnRha3RlLFxuICBxcSxcbiAgd2VjaGF0LFxuICB3ZWlibyxcbiAgcGhhbnRhdXRoLFxuICBtaWNyb3NvZnQsXG4gIGtleWNsb2FrLFxuICBsZGFwLFxuICB3ZWJhdXRobixcbn07XG5cbmZ1bmN0aW9uIGF1dGhEYXRhVmFsaWRhdG9yKHByb3ZpZGVyLCBhZGFwdGVyLCBhcHBJZHMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChhdXRoRGF0YSwgcmVxLCB1c2VyKSB7XG4gICAgaWYgKGFwcElkcyAmJiB0eXBlb2YgYWRhcHRlci52YWxpZGF0ZUFwcElkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhd2FpdCBhZGFwdGVyLnZhbGlkYXRlQXBwSWQoYXBwSWRzLCBhdXRoRGF0YSwgb3B0aW9ucywgcmVxLCB1c2VyKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhZGFwdGVyLnZhbGlkYXRlQXV0aERhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBhZGFwdGVyLnZhbGlkYXRlQXV0aERhdGEoYXV0aERhdGEsIG9wdGlvbnMsIHJlcSwgdXNlcik7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHR5cGVvZiBhZGFwdGVyLnZhbGlkYXRlU2V0VXAgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBhZGFwdGVyLnZhbGlkYXRlTG9naW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBhZGFwdGVyLnZhbGlkYXRlVXBkYXRlID09PSAnZnVuY3Rpb24nXG4gICAgKSB7XG4gICAgICAvLyBXZSBjYW4gY29uc2lkZXIgZm9yIERYIHB1cnBvc2Ugd2hlbiBtYXN0ZXJLZXkgaXMgZGV0ZWN0ZWQsIHdlIHNob3VsZFxuICAgICAgLy8gdHJpZ2dlciBhIGxvZ2dlZCBpbiB1c2VyXG4gICAgICBjb25zdCBpc0xvZ2dlZEluID1cbiAgICAgICAgKHJlcS5hdXRoLnVzZXIgJiYgdXNlciAmJiByZXEuYXV0aC51c2VyLmlkID09PSB1c2VyLmlkKSB8fCAodXNlciAmJiByZXEuYXV0aC5pc01hc3Rlcik7XG4gICAgICBsZXQgaXNVcGRhdGUgPSBmYWxzZTtcbiAgICAgIGxldCBoYXNBdXRoRGF0YUNvbmZpZ3VyZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5nZXQoJ2F1dGhEYXRhJykgJiYgdXNlci5nZXQoJ2F1dGhEYXRhJylbcHJvdmlkZXJdKSB7XG4gICAgICAgIGhhc0F1dGhEYXRhQ29uZmlndXJlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xvZ2dlZEluICYmIGhhc0F1dGhEYXRhQ29uZmlndXJlZCkge1xuICAgICAgICBpc1VwZGF0ZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1VwZGF0ZSkge1xuICAgICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZVVwZGF0ZShhdXRoRGF0YSwgb3B0aW9ucywgcmVxLCB1c2VyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0xvZ2dlZEluICYmIGhhc0F1dGhEYXRhQ29uZmlndXJlZCkge1xuICAgICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZUxvZ2luKGF1dGhEYXRhLCBvcHRpb25zLCByZXEsIHVzZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc0F1dGhEYXRhQ29uZmlndXJlZCkge1xuICAgICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZVNldFVwKGF1dGhEYXRhLCBvcHRpb25zLCByZXEsIHVzZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSxcbiAgICAgICdBZGFwdGVyIG5vdCByZWFkeSwgbmVlZCB0byBpbXBsZW1lbnQgdmFsaWRhdGVBdXRoRGF0YSBvciAodmFsaWRhdGVTZXRVcCwgdmFsaWRhdGVMb2dpbiwgdmFsaWRhdGVVcGRhdGUpJ1xuICAgICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxvYWRBdXRoQWRhcHRlcihwcm92aWRlciwgYXV0aE9wdGlvbnMpIHtcbiAgbGV0IGRlZmF1bHRBZGFwdGVyID0gcHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgY29uc3QgcHJvdmlkZXJPcHRpb25zID0gYXV0aE9wdGlvbnNbcHJvdmlkZXJdO1xuICBpZiAoXG4gICAgcHJvdmlkZXJPcHRpb25zICYmXG4gICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3ZpZGVyT3B0aW9ucywgJ29hdXRoMicpICYmXG4gICAgcHJvdmlkZXJPcHRpb25zWydvYXV0aDInXSA9PT0gdHJ1ZVxuICApIHtcbiAgICBkZWZhdWx0QWRhcHRlciA9IG9hdXRoMjtcbiAgfVxuXG4gIGlmICghZGVmYXVsdEFkYXB0ZXIgJiYgIXByb3ZpZGVyT3B0aW9ucykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0QWRhcHRlcik7XG4gIGNvbnN0IGFwcElkcyA9IHByb3ZpZGVyT3B0aW9ucyA/IHByb3ZpZGVyT3B0aW9ucy5hcHBJZHMgOiB1bmRlZmluZWQ7XG5cbiAgLy8gVHJ5IHRoZSBjb25maWd1cmF0aW9uIG1ldGhvZHNcbiAgaWYgKHByb3ZpZGVyT3B0aW9ucykge1xuICAgIGNvbnN0IG9wdGlvbmFsQWRhcHRlciA9IGxvYWRBZGFwdGVyKHByb3ZpZGVyT3B0aW9ucywgdW5kZWZpbmVkLCBwcm92aWRlck9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25hbEFkYXB0ZXIpIHtcbiAgICAgIFtcbiAgICAgICAgJ3ZhbGlkYXRlQXV0aERhdGEnLFxuICAgICAgICAndmFsaWRhdGVBcHBJZCcsXG4gICAgICAgICd2YWxpZGF0ZVNldFVwJyxcbiAgICAgICAgJ3ZhbGlkYXRlTG9naW4nLFxuICAgICAgICAndmFsaWRhdGVVcGRhdGUnLFxuICAgICAgICAnY2hhbGxlbmdlJyxcbiAgICAgICAgJ3BvbGljeScsXG4gICAgICBdLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbmFsQWRhcHRlcltrZXldKSB7XG4gICAgICAgICAgYWRhcHRlcltrZXldID0gb3B0aW9uYWxBZGFwdGVyW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGFkYXB0ZXIsIGFwcElkcywgcHJvdmlkZXJPcHRpb25zIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGF1dGhPcHRpb25zID0ge30sIGVuYWJsZUFub255bW91c1VzZXJzID0gdHJ1ZSkge1xuICBsZXQgX2VuYWJsZUFub255bW91c1VzZXJzID0gZW5hYmxlQW5vbnltb3VzVXNlcnM7XG4gIGNvbnN0IHNldEVuYWJsZUFub255bW91c1VzZXJzID0gZnVuY3Rpb24gKGVuYWJsZSkge1xuICAgIF9lbmFibGVBbm9ueW1vdXNVc2VycyA9IGVuYWJsZTtcbiAgfTtcbiAgLy8gVG8gaGFuZGxlIHRoZSB0ZXN0IGNhc2VzIG9uIGNvbmZpZ3VyYXRpb25cbiAgY29uc3QgZ2V0VmFsaWRhdG9yRm9yUHJvdmlkZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICBpZiAocHJvdmlkZXIgPT09ICdhbm9ueW1vdXMnICYmICFfZW5hYmxlQW5vbnltb3VzVXNlcnMpIHtcbiAgICAgIHJldHVybiB7IHZhbGlkYXRvcjogdW5kZWZpbmVkIH07XG4gICAgfVxuXG4gICAgY29uc3QgeyBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyB9ID0gbG9hZEF1dGhBZGFwdGVyKHByb3ZpZGVyLCBhdXRoT3B0aW9ucyk7XG5cbiAgICByZXR1cm4geyB2YWxpZGF0b3I6IGF1dGhEYXRhVmFsaWRhdG9yKHByb3ZpZGVyLCBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyksIGFkYXB0ZXIgfTtcbiAgfTtcblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZ2V0VmFsaWRhdG9yRm9yUHJvdmlkZXIsXG4gICAgc2V0RW5hYmxlQW5vbnltb3VzVXNlcnMsXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMubG9hZEF1dGhBZGFwdGVyID0gbG9hZEF1dGhBZGFwdGVyO1xuIl19